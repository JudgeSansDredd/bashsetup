#!/usr/bin/env bash

# Terminal info for whiptail
TERMINAL_HEIGHT=`tput lines`
BOX_HEIGHT=`printf "%.0f" $(echo "scale=2; $TERMINAL_HEIGHT * .5" | bc)`
TERMINAL_WIDTH=`tput cols`
BOX_WIDTH=`printf "%.0f" $(echo "scale=2; $TERMINAL_WIDTH * .75" | bc)`

# Where the lastpass config will be kept
LASTPASS_LOCAL_DIRECTORY="$HOME/.lpass"
CONFIG_FILE="$LASTPASS_LOCAL_DIRECTORY/config"

# SSH Key config locations
LASTPASS_SSH_FOLDER="Programming\\SSH"
SSH_CONFIG_FILE="${HOME}/.ssh/config"
SSH_LOCAL_CONFD="${HOME}/.ssh/config.d"

# Pem key locations
LASTPASS_PEM_FOLDER="Programming\\SSH\\pem"
PEM_LOCAL_DIRECTORY="${HOME}/.ssh/keys"

# AWS Configuration variables
LASTPASS_AWS_CONFIG_FOLDER="Programming\\AWS\\Config"
AWS_CONFIG_VARIABLES=("region" "credential_process")
AWS_CONFIG_LOCAL="${HOME}/.aws/config"

ensureConfigFile() {
    mkdir -p $LASTPASS_LOCAL_DIRECTORY
    if [ -f "$CONFIG_FILE" ]; then
        source $CONFIG_FILE
    else
        touch $CONFIG_FILE
    fi
}

ensureLpassAndWtail() {
    setup_whiptail
    if hash lpass 2>/dev/null; then
        echo ""
    else
        if (whiptail --yesno "You must install LastPass CLI to use this tool. Do you with to continue?" $BOX_HEIGHT $BOX_WIDTH); then
            if [ "$(uname)" = "Darwin" ]; then
                brew install lastpass-cli
            elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
                sudo apt install lastpass-cli
            fi
        fi
    fi
}

showProgress() {
    message=$1
    current=$2
    total=$3
    percent=$(($current*100/$total))
    echo $percent | TERM=linux whiptail --title="Secrets" --gauge "${message} (${current}/${total})" $BOX_HEIGHT $BOX_WIDTH $percent
}

setConfigValue() {
    # Escape spaces
    NEW_CONFIG_VALUE=${2//\ /\\\ }
    if grep -Fq "export $1=" $CONFIG_FILE
    then
        # we have to add the -i '' argument for mac
        [ "$(uname)" = "Darwin" ] && args="-i ''" || args="-i"
        # Escape the backslashes
        NEW_CONFIG_VALUE=${NEW_CONFIG_VALUE//\\/\\\\}
        `sed $args "s/export $1.*/export $1=$NEW_CONFIG_VALUE/g" $CONFIG_FILE`
    else
        echo "export $1=$NEW_CONFIG_VALUE" >> $CONFIG_FILE
    fi
    # this dynamically sets the variable name in the script scope
    printf -v "$1" '%s' "$2"
}

getLpassEmail() {
    LASTPASS_EMAIL=$(whiptail --title "Lastpass Secret Handling" --inputbox "LastPass Account Email" --nocancel $BOX_HEIGHT $BOX_WIDTH $LASTPASS_EMAIL --title "LastPass Email" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        exit
    fi
    setConfigValue "LASTPASS_EMAIL" $LASTPASS_EMAIL
}

pushSSHConfig() {
    # Find all config files and ask which to push
    whiptail_config_files=()
    for config in "${SSH_LOCAL_CONFD}"/*.config
    do
        trunc_config=$(basename $config)
        trunc_config=${trunc_config/\.config/}
        whiptail_config_files+=("$trunc_config" "" ON)
    done

    # Select which ssh configs to push
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "What SSH config files would you like to push?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_config_files[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    if [ $exitstatus = 0 ]; then
        # OK was pressed
        numChoices=${#choices[@]}
        current=0
        for choice in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pushing ${choice}.config" $current $numChoices
            (cat "${SSH_LOCAL_CONFD}/${choice}.config" | lpass edit --sync=now --non-interactive "${LASTPASS_SSH_FOLDER}/${choice}" --notes)
        done
    fi
}

pushPemKeys() {
    # Make keys directory if it doesn't exist
    mkdir -p $PEM_LOCAL_DIRECTORY

    # Find all pem keys and ask which to push
    whiptail_pem_files=()
    for pem_file in "${PEM_LOCAL_DIRECTORY}"/*.pem
    do
        trunc_pem=$(basename $pem_file)
        trunc_pem=${trunc_pem/\.pem/}
        whiptail_pem_files+=("$trunc_pem" "" ON)
    done

    # Select which pem keys to push
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "What pem keys would you like to push?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_pem_files[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    if [ $exitstatus = 0 ]; then
        # Ok was pressed
        numChoices=${#choices[@]}
        current=0
        for choice in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pushing ${choice}.pem" $current $numChoices
            (cat "${PEM_LOCAL_DIRECTORY}/${choice}.pem" | lpass edit --sync=now --non-interactive "${LASTPASS_PEM_FOLDER}/${choice}" --notes)
        done
    fi
}

pullSSHKeys() {
    # Set up initial ssh config
    echo "Host *
    IdentitiesOnly yes
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile $HOME/.ssh/id_rsa

Include config.d/*.config" > $SSH_CONFIG_FILE
    chmod 600 $SSH_CONFIG_FILE

    # Make config.d directory if it doesn't exist
    mkdir -p $SSH_LOCAL_CONFD

    # Grab configs from lastpass
    raw_config_names=($(lpass ls $LASTPASS_SSH_FOLDER | awk '{print $1}'))
    # raw_config_names=($(lpass ls $LASTPASS_SSH_FOLDER | awk '(NR>1){print $1}'))

    # Create whiptail options for checklist
    whiptail_config_names=()
    for value in "${raw_config_names[@]}"
    do
        trunc_config=$(basename $value)
        whiptail_config_names+=("$trunc_config" "" ON)
    done

    # Select which ssh configs to download
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "What SSH config files would you like to pull?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_config_names[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through choices and download
    if [ $exitstatus = 0 ]; then
        # OK was pressed
        numChoices=${#choices[@]}
        current=0
        for choice in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pulling ${choice}.config" $current $numChoices
            (lpass show "${LASTPASS_SSH_FOLDER}/${choice}" --notes) > "${SSH_LOCAL_CONFD}/${choice}.config"
            chmod 600 "${SSH_LOCAL_CONFD}/${choice}.config"
        done
    fi
}

pullPemKeys() {
    # make keys directory if it doesn't exist
    mkdir -p $PEM_LOCAL_DIRECTORY

    # Grab list of pem keys
    raw_pem_names=($(lpass ls $LASTPASS_PEM_FOLDER | awk '{print $1}'))

    # Create whiptail options for checklist
    whiptail_pem_names=()
    for value in "${raw_pem_names[@]}"
    do
        trunc_pem=$(basename $value)
        whiptail_pem_names+=("$trunc_pem" "" ON)
    done

    # Select which pem keys to download
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "What pem keys would you like to pull?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_pem_names[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through choices and download
    if [ $exitstatus = 0 ]; then
        # OK was pressed
        numChoices=${#choices[@]}
        current=0
        for choice in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pulling ${choice}.pem" $current $numChoices
            (lpass show "${LASTPASS_PEM_FOLDER}/${choice}" --notes) > "${PEM_LOCAL_DIRECTORY}/${choice}.pem"
            chmod 600 "${PEM_LOCAL_DIRECTORY}/${choice}.pem"
        done
    fi
}

pushAWSConfig() {
    # Get the aws profiles
    profiles=($(aws configure list-profiles))

    # Ask which ones to push
    whiptail_profiles=()
    for profile in "${profiles[@]}"
    do
        whiptail_profiles+=("$profile" "" ON)
    done
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "Which AWS configs would you like to push?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_profiles[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through the choices and push
    if [ $exitstatus = 0 ]; then
        # Ok was pressed
        numChoices=${#choices[@]}
        current=0
        for profile in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pushing ${profile}" $current $numChoices
            config="[profile ${profile}]
"
            for variable in "${AWS_CONFIG_VARIABLES[@]}"
            do
                value=$(aws configure get --profile $profile $variable)
                if [ -n "$value" ]; then
                    config="${config}${variable} = ${value}
"
                fi
            done
            echo $config | lpass edit --sync=now --non-interactive "${LASTPASS_AWS_CONFIG_FOLDER}/${profile}" --notes
        done
    fi

}

pushAWSCredentials() {
    # TODO: Write this method
}

pullAWSConfig() {
    # Set up initial aws config (i.e. empty the file)
    echo "" > $AWS_CONFIG_LOCAL

    # Grab configs from lastpass
    raw_config_names=($(lpass ls $LASTPASS_AWS_CONFIG_FOLDER | awk '{print $1}'))
    # raw_config_names=($(lpass ls $LASTPASS_SSH_FOLDER | awk '(NR>1){print $1}'))

    # Create whiptail options for checklist
    whiptail_config_names=()
    for value in "${raw_config_names[@]}"
    do
        trunc_config=$(basename $value)
        whiptail_config_names+=("$trunc_config" "" ON)
    done

    # Select which ssh configs to download
    choices=($(whiptail --title "Lastpass Secret Handling" --separate-output --checklist "Which AWS configs would you like to pull?" $BOX_HEIGHT $BOX_WIDTH 10 "${whiptail_config_names[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through choices and download
    if [ $exitstatus = 0 ]; then
        # OK was pressed
        numChoices=${#choices[@]}
        current=0
        for choice in "${choices[@]}"
        do
            current=$(($current+1))
            showProgress "Pulling ${profile}" $current $numChoices
            (lpass show "${LASTPASS_AWS_CONFIG_FOLDER}/${choice}" --notes) >> $AWS_CONFIG_LOCAL
        done
    fi
}

pullAWSCredentials() {
    # TODO: Write this method
}

doPush() {
    # TODO: Restore this to full functionality
    pushSSHConfig
    pushPemKeys
    pushAWSConfig
    # pushAWSCredentials
}

doPull() {
    # TODO: Restore this to full functionality
    pullSSHKeys
    pullPemKeys
    pullAWSConfig
    # pullAWSCredentials
}

###################
# MAIN LINE LOGIC #
###################
ensureConfigFile
if [ -z "$LASTPASS_EMAIL" ]; then
    getLpassEmail
fi

lastpass_status=$(lpass status)
if [ $lastpass_status = "Not logged in." ]; then
    lpass login --trust $LASTPASS_EMAIL
fi

choice=$(whiptail --title "Lastpass Secret Handling" --menu "What would you like to do?" $BOX_HEIGHT $BOX_WIDTH 10 "Pull" "secrets from Lastpass" "Push" "secrets to Lastpass" 3>&2 2>&1 1>&3)
case $choice in
    "Push")
        doPush
    ;;
    "Pull")
        doPull
    ;;
esac
clear
echo "${blue}Secrets exited successfully${default}"
