
# Terminal info for whiptail
TERMINAL_HEIGHT=`tput lines`
BOX_HEIGHT=`printf "%.0f" $(echo "scale=2; $TERMINAL_HEIGHT * .5" | bc)`
TERMINAL_WIDTH=`tput cols`
BOX_WIDTH=`printf "%.0f" $(echo "scale=2; $TERMINAL_WIDTH * .75" | bc)`

# Where the lastpass config will be kept
LASTPASS_DIRECTORY="$HOME/.lpass"
CONFIG_FILE="$LASTPASS_DIRECTORY/config"

# SSH Key config locations
LASTPASS_SSH_FOLDER="Programming\\SSH"
SSH_CONFIG_FILE="${HOME}/.ssh/config"
SSH_CONFD="${HOME}/.ssh/config.d"

# Pem key locations
LASTPASS_PEM_FOLDER="Programming\\SSH\\pem"
PEM_DIRECTORY="${HOME}/.ssh/keys"


ensureConfigFile() {
    mkdir -p $LASTPASS_DIRECTORY
    if [ -f "$CONFIG_FILE" ]; then
        source $CONFIG_FILE
    else
        touch $CONFIG_FILE
    fi
}

ensureLpassAndWtail() {
    if hash whiptail 2>/dev/null; then
        echo ""
    else
        if [ "$(uname)" = "Darwin" ]; then
            brew install newt
        elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
            sudo apt install whiptail
        fi
    fi
    if hash lpass 2>/dev/null; then
        echo ""
    else
        if (whiptail --yesno "You must install LastPass CLI to use this tool. Do you with to continue?" $BOX_HEIGHT $BOX_WIDTH); then
            if [ "$(uname)" = "Darwin" ]; then
                brew install lastpass-cli
            elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
                sudo apt install lastpass-cli
            fi
        fi
    fi
}

setConfigValue() {
    # Escape spaces
    NEW_CONFIG_VALUE=${2//\ /\\\ }
    if grep -Fq "export $1=" $CONFIG_FILE
    then
        # we have to add the -i '' argument for mac
        [ "$(uname)" = "Darwin" ] && args="-i ''" || args="-i"
        # Escape the backslashes
        NEW_CONFIG_VALUE=${NEW_CONFIG_VALUE//\\/\\\\}
        `sed $args "s/export $1.*/export $1=$NEW_CONFIG_VALUE/g" $CONFIG_FILE`
    else
        echo "export $1=$NEW_CONFIG_VALUE" >> $CONFIG_FILE
    fi
    # this dynamically sets the variable name in the script scope
    printf -v "$1" '%s' "$2"
}

getLpassEmail() {
    LASTPASS_EMAIL=$(whiptail --inputbox "LastPass Account Email" --nocancel $BOX_HEIGHT $BOX_WIDTH $LASTPASS_EMAIL --title "LastPass Email" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        exit
    fi
    setConfigValue "LASTPASS_EMAIL" $LASTPASS_EMAIL
}

doPush() {
    # Find all config files and ask which to push
    whiptail_config_files=()
    for config in "${SSH_CONFD}"/*.config
    do
        trunc_config=$(basename $config)
        trunc_config=${trunc_config/\.config/}
        whiptail_config_files+=("$trunc_config" "" ON)
    done

    # Select which ssh configs to push
    choices=($(whiptail --separate-output --checklist "What config files would you like to push?" $BOX_HEIGHT $BOX_WIDTH 5 "${whiptail_config_files[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    if [ $exitstatus = 0 ]; then
        # OK was pressed
        for choice in "${choices[@]}"
        do
            (cat "${SSH_CONFD}/${choice}.config" | lpass edit --sync=now --non-interactive "${LASTPASS_SSH_FOLDER}/${choice}" --notes)
        done
    fi

    # Make keys directory if it doesn't exist
    mkdir -p $PEM_DIRECTORY

    # Find all pem keys and ask which to push
    whiptail_pem_files=()
    for pem_file in "${PEM_DIRECTORY}"/*.pem
    do
        trunc_pem=$(basename $pem_file)
        trunc_pem=${trunc_pem/\.pem/}
        whiptail_pem_files+=("$trunc_pem" "" ON)
    done

    # Select which pem keys to push
    choices=($(whiptail --separate-output --checklist "What pem keys would you like to push?" $BOX_HEIGHT $BOX_WIDTH 5 "${whiptail_pem_files[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    if [ $exitstatus = 0 ]; then
        # Ok was pressed
        for choice in "${choices[@]}"
        do
            (cat "${PEM_DIRECTORY}/${choice}.pem" | lpass edit --sync=now --non-interactive "${LASTPASS_PEM_FOLDER}/${choice}" --notes)
        done
    fi
}

doPull() {
    # Set up initial ssh config
    echo "Host *
    IdentitiesOnly yes
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/id_rsa

Include config.d/*.config" > $SSH_CONFIG_FILE

    # Make config.d directory if it doesn't exist
    mkdir -p $SSH_CONFD

    # Grab configs from lastpass
    raw_config_names=($(lpass ls $LASTPASS_SSH_FOLDER | awk '{print $1}'))
    # raw_config_names=($(lpass ls $LASTPASS_SSH_FOLDER | awk '(NR>1){print $1}'))

    # Create whiptail options for checklist
    whiptail_config_names=()
    for value in "${raw_config_names[@]}"
    do
        trunc_config=$(basename $value)
        whiptail_config_names+=("$trunc_config" "" ON)
    done

    # Select which ssh configs to download
    choices=($(whiptail --separate-output --checklist "What config files would you like to pull?" $BOX_HEIGHT $BOX_WIDTH 5 "${whiptail_config_names[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through choices and download
    if [ $exitstatus = 0 ]; then
        # OK was pressed
        for choice in "${choices[@]}"
        do
            (lpass show "${LASTPASS_SSH_FOLDER}/${choice}" --notes) > "${SSH_CONFD}/${choice}.config"
        done
    fi

    # make keys directory if it doesn't exist
    mkdir -p $PEM_DIRECTORY

    # Grab list of pem keys
    raw_pem_names=($(lpass ls $LASTPASS_PEM_FOLDER | awk '{print $1}'))

    # Create whiptail options for checklist
    whiptail_pem_names=()
    for VALUE in "${raw_pem_names[@]}"
    do
        trunc_pem=$(basename $VALUE)
        whiptail_pem_names+=("$trunc_pem" "" ON)
    done

    # Select which pem keys to download
    choices=($(whiptail --separate-output --checklist "What pem keys would you like to pull?" $BOX_HEIGHT $BOX_WIDTH 5 "${whiptail_pem_names[@]}" 3>&2 2>&1 1>&3))
    exitstatus=$?

    # If cancel was not pressed, iterate through choices and download
    if [ $exitstatus = 0 ]; then
        # OK was pressed
        for choice in "${choices[@]}"
        do
            (lpass show "${LASTPASS_PEM_FOLDER}/${choice}" --notes) > "${PEM_DIRECTORY}/${choice}.pem"
        done
    fi

}

###################
# MAIN LINE LOGIC #
###################
ensureConfigFile
if [ -z "$LASTPASS_EMAIL" ]; then
    getLpassEmail
fi

lastpass_status=$(lpass status)
if [ $lastpass_status = "Not logged in." ]; then
    lpass login --trust $LASTPASS_EMAIL
fi

choice=$(whiptail --title "Lastpass Secret Handling" --menu "What would you like to do?" $BOX_HEIGHT $BOX_WIDTH 5 "Pull" "secrets from Lastpass" "Push" "secrets to Lastpass" 3>&2 2>&1 1>&3)
case $choice in
    "Push")
        doPush
    ;;
    "Pull")
        doPull
    ;;
esac
