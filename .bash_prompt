
# This bit changes the prompt when you're in a Git repo.

unset -f _git_prompt
function _git_prompt() {
    COMMIT_DIFFERENCES=0
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" == *"Not a git repository (or any of the parent directories)"* || "$git_status" =~ not\ a\ git\ repo ]]; then
        local local_branch="`(git branch 2>/dev/null | grep '^*' | colrm 1 2)`"
        local remote_branch="`git for-each-ref --format='%(upstream:short)' $(git rev-parse --symbolic-full-name $local_branch)`"
        # local fetch_results="`git fetch ${remote_branch/\// } --quiet`"
        while read local remote
        do
            [ -z "$remote" ] && continue
            git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
            LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
            RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
            COMMIT_DIFFERENCES=$(($LEFT_AHEAD + $RIGHT_AHEAD + $COMMIT_DIFFERENCES))
            if [ "$local" == "$local_branch" ] && [ "$remote" == "$remote_branch" ]; then
                if [ "$LEFT_AHEAD" -ne 0 ]; then
                    MSG_AHEAD="$ORANGE($local $LEFT_AHEAD ahead of $remote)"
                fi
                if [ "$RIGHT_AHEAD" -ne 0 ]; then
                    MSG_AHEAD="$PINK($local $RIGHT_AHEAD behind $remote)"
                fi
                if [ "$COMMIT_DIFFERENCES" == 0 ]; then
                    MSG_AHEAD="$GREEN($local matches $remote)"
                fi
            elif [ "$remote_branch" == "" ]; then
                MSG_AHEAD="$PINK($local_branch has no remote)"
            fi
            local ahead="$MSG_AHEAD"
        done < <(git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads)

        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local gitcolour="$GREEN nothing to commit $MSG_AHEAD"
        # elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
        elif [[ "$git_status" =~ Untracked\ files ]]; then
            local gitcolour="$PINK untracked files $MSG_AHEAD"
        else
            local gitcolour="$ORANGE non-committed changes $MSG_AHEAD"
        fi
        
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
            test "$branch" != master || branch=''
        else
            # Detached HEAD.  (branch=HEAD is a faster alternative.)
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
                echo HEAD`)"
        fi
    echo -n "$gitcolour"
    fi
}
export _git_prompt

# Colour your prompt

unset _prompt_command
function _prompt_command() {
    PS1='\n\n\[$LBLUE\]\w`_git_prompt`\n\[$GREEN\]>> \[$YELLOW\]'
}
export _prompt_command

export PROMPT_COMMAND=_prompt_command

